Q) Write a JDBC application to select the record from student table and store in ArrayList?

Student.java
------------
package com.ihub.www;

public class Student 
{
	private int sno;
	private String sname;
	private String sadd;
	
	public Student(int sno, String sname, String sadd) {
		super();
		this.sno = sno;
		this.sname = sname;
		this.sadd = sadd;
	}
	
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public String getSname() {
		return sname;
	}
	public void setSname(String sname) {
		this.sname = sname;
	}
	public String getSadd() {
		return sadd;
	}
	public void setSadd(String sadd) {
		this.sadd = sadd;
	}
}

TaskApp.java
-------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class TaskApp 
{
	public static void main(String[] args)throws  Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from student";
		
		List<Student> list=new ArrayList<Student>();
		
		ResultSet rs=st.executeQuery(qry);
		
		while(rs.next())
		{
			int no=rs.getInt(1);
			String name=rs.getString(2);
			String add=rs.getString(3);
			list.add(new Student(no,name,add));
		}
		
		//display the data from list 
		list.forEach(student -> System.out.println(student.getSno()+","+student.getSname()+","+student.getSadd()));
	}
}



Q) Types of Connection objects in JDBC?

We have two types of Connection objects in JDBC.

1) Direct JDBC Connection object 

2) Pooled JDBC Connection object 

1) Direct JDBC Connection object 
-----------------------------------
A JDBC Connection object which is created by the programmer is called direct JDBC Connection object.
ex:
	Class.forName("driver-class-name");
	Connection con=DriverManager.getConnection("driver-url","db-username","db-password");
	
2) Pooled JDBC Connection object
----------------------------------
A JDBC Connection object which is gathered from JDBC Connection pool.


Types of Statement objects
===========================
We have three types of Statement objects in JDBC.

1) Simple Statement object 
-------------------------
It is an object of underlying supplied java class which implements java.sql.Statement interface.

2) PreparedStatement object 
----------------------------
It is an objct of underlying supplied java class which implements java.sql.PreparedStatement interface.

3) CallableStatement object 
----------------------------
It is an object of underlying supplied java class which implements java.sql.CallableStatement interface.


SQL Injection problem
======================
Along with input values if we pass special SQL instructions which change the behaviour of a query and behaviour of an application is called SQL injection problem.

Here special SQL instructions means comment in SQL i.e --.

While dealing with simple Statement object there is a chance of raising SQL injection problem.

ex:
	username : raja'-- 
	password : pooja

	Valid Credentials


userlist table 
==============
drop table userlist;

create table userlist(uname varchar2(10),pwd varchar2(10));

insert into userlist values('raja','rani');

insert into userlist values('king','kingdom');

commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class SQLInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the username :");
		String name=sc.next();
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		//convert input values according to SQL query
		name="'"+name+"'";
		pass="'"+pass+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry="select count(*) from userlist where uname="+name+" and pwd="+pass;
		
		ResultSet rs=st.executeQuery(qry);
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		
		if(result==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
		
		rs.close();
		st.close();
		con.close();
	}
	
}

Limitations with Simple Statement object
=========================================
1) It is not suitable to execute same query for multiple times with same or different values.

2) It raises SQL injection problem.

3) Framing query with variables is quit complex.

4) We can't use string values directly to query parameter without conversion.

5) It does not allow us to insert date values directly to database table column.

6) It does not allow us to insert LOB(Large Object) values directly to database table column.

To overcome above limitations we need to use PreparedStatement object.




















