JDBC flexible Application 
=========================
In JDBC , Connection object consider as heavy weight object.

It is never recommanded to create Connection object for every JDBC application.

We need to create a seperate class that returns Connection object.

DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	private DBConnection()
	{
		
	}
	
	public static Connection getConnection()
	{
		try
		{
			if(con==null)
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}



FlexibleApp.java
----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con = DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

Thin-Client/Fat-Server application
===================================
Every JDBC application is a thin-client/fat-server application.

Diagram: jdbc7.1

To develop thin-client/fat-server application we need to store our persistence logic and business logic in database in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.


PL/SQL procedure 
================
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
IS
BEGIN
C:=A+B;
END;
/

ex:
----
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the values to IN parameters
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute 
		cst.execute();
		
		//gather the result 
		int result = cst.getInt(3);
		System.out.println("Sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}

Batch Processing
=================
Batch processing is used to declare multiple queries in a batch and makes a single call to the database.

To add each query to batch we need to use addBatch() method of Statement object.
ex:
	st.addBatch(query);

To execute the queries in a batch we need to use executeBatch() method of Statement object.
ex:
	int[] result = st.executeBatch();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		//declare the queries 
		String qry1="insert into student values(104,'ramulu','pune')";
		String qry2="delete from student where sno=103";
		String qry3="update student set sname='rani' where sno=101";
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		
		System.out.println("No of records effected are ="+sum);
		
		st.close();
		con.close();
	}
}

Transaction Management 
======================
Transaction means single unit of work.

We will commit if transaction is success.

We will rollback if transaction is failed.

Diagram: jdbc7.2

Kotak table 
===========
drop table kotak;
create table kotak(accno number(6),accholder varchar2(10), accbal number(8));
insert into kotak values(111111,'Balu',5000);
insert into kotak values(222222,'Hari',6000);
commit;

SBI table 
==========
drop table sbi;
create table sbi(accno number(6),accholder varchar2(10), accbal number(8));
insert into sbi values(100001,'Sai',80000);
insert into sbi values(200002,'abhi',90000);
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the source account number : ");
		int sno=sc.nextInt();
		
		System.out.println("Enter the destination account number :");
		int dno=sc.nextInt();
		
		System.out.println("Enter the amount to transfer :");
		int amt = sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		//create the queries 
		String qry1="update sbi set accbal=accbal-"+amt+" where accno="+sno;
		String qry2="update kotak set accbal=accbal+"+amt+" where accno="+dno;
		
		//each query add to batch 
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch
		int[] result=st.executeBatch();// 1  1 
		
		boolean flag=true;	
		for(int i:result)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		if(flag)
		{
			System.out.println("Transaction Done Successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed");
			con.rollback();
		}
		
		st.close();
		con.close();
	}
}


Types of ResultSet objects
===========================
We have two types of ResultSet objects in JDBC.

1) Non-Scrollable ResultSet object 

2) Scrollable ResultSet object 


Diagram: jdbc7.3


1) Non-Scrollable ResultSet object
----------------------------------
If a ResultSet object which allows us to read the records sequentially, uni-directional such type of ResultSet object is called non-scrollable ResultSet object.

If Statement object is created without TYPE and MODE value then that ResultSet object is called 
non-scrollable ResultSet object.
ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2) Scrollable ResultSet object
----------------------------
If a ResultSet object which allows us to read the records non-sequentially, bi-directional, randomly such type of ResultSet object is called scrollable ResultSet object.

If Statement object is created with TYPE and MODE value then that ResultSet object is called 
scrollable ResultSet object.
ex:
	Statement st=con.createStatement(TYPE_VALUE,MODE_VALUE);
	ResultSet rs=st.executeQuery("select * from student");
Note:
-----
We have following TYPE values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE
	ResultSet.TYPE_SCROLL_INSITIVE

We have following MODE values.
ex:
	ResultSet.CONCUR_READ_ONLY
	ResultSet.CONCUR_UPDATABLE
























